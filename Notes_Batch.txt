set batLoc=%0
cd ..\..


%..\ to go up
xcopy source dest (/y to overwrite)
robotcopy source dest (/e to include empty folders)


%cd% will give you the current working directory (variable)
%~dp0 will give you the full path to the batch file's directory (static)


set ROOT=c:\programs 
set SRC_ROOT=%ROOT%\System\Source

set curDate=%date:~10,4%%date:~7,2%%date:~4,2% for date

if exist %destTwo%\%curDate% (Echo %destTwo%\%curDate% Exists & Echo %destTwo%\%curDate% Found >> Result.txt) Else (md %destTwo%\%curDate% & Echo %destTwo%\%curDate% not Found >> Result.txt)
if else and echo to file

C:\>set YYYYMMDD=%DATE:~10,4%%DATE:~4,2%%DATE:~7,2%

C:\>echo %YYYYMMDD%
20150806
The substring arguments to extract the elements of the date string are in the format %variable:~startposition,numberofchars%, so if the "T" in Thursday in the string "Thu 08/06/2015" is at position 0, the 10th character is the "2" of 2015 and I want 4 characters, i.e., "2015", so %DATE:10,4% will give me those characters. Or you can also think of the first number as the numer of characters to be skipped, i.e., %variable:~num_chars_to_skip,numberofchars%. I can then append %DATE:~4,2% to get "08" for the month followed by %DATE:~7,2% to extract the day, i.e., "06" if the date is August 6, 2015 represented in the %DATE% variable as "Thu 08/06/2015". Reference with additional links

:: = comment


NOT USED

::get list of files
dir *.exr /b > exrs.txt
::set result of list into variables
set count=1
setlocal enabledelayedexpansion
for /f %%a in (result.txt) do (
set line=%%a
set var!count!=!line!
set /a count +=1
)
xcopy %var1% %destOne% /y






::get list of files
dir *.exr /b > exrs.txt
::set result of list into variables
set count=1
setlocal enabledelayedexpansion
for /f %%a in (result.txt) do (
set line=%%a
set var!count!=!line!
set /a count +=1
)
::for /l %%i in (1,1,5)  do copy %var1% %curDir%\EXR /y
copy %var1% %curDir%\EXR /y
::xcopy %var2% %curDir%\EXR /y


IF EXIST %inputFolder%\*.%extension% GOTO exists

goto end

:exists

echo exists

:end





:checkForEXR
IF EXIST %curDir%\*.exr GOTO exists

goto end

:exists

echo exists >> Result.txt 

:end





call :docopy %curDir% %destOne%
goto :eof
:docopy
xcopy /S /E /I %1 %2\%~n1
goto :eof



you can use %~n to extract the name of the directory







FOR %%i IN ("%file%") DO (
ECHO filedrive=%%~di
ECHO filepath=%%~pi
ECHO filename=%%~ni
ECHO fileextension=%%~xi
)

Echo. for a new line



xcopy /y to overwrite /e to copy all folders
same for robocopy

SET /P variable=[promptString]

The /P switch allows you to set the value of a variable to a line of input entered by the user. Displays the specified promptString before reading the line of input. The promptString can be empty.
	
You can use set with the /p argument:

SET /P variable=[promptString]

The /P switch allows you to set the value of a variable to a line of input entered by the user. Displays the specified promptString before reading the line of input. The promptString can be empty.
So, simply use something like

set /p Input=Enter some text:
Later you can use that variable as argument to a command:

myCommand %Input%
Be careful though, that if your input might contain spaces it's probably a good idea to quote it:

myCommand "%Input%"





You can break up long lines with the caret ^ as long as you remember that the caret and the newline following it are completely removed. So, if there should be a space where you're breaking the line, include a space. (More on that below.)

Example:

copy file1.txt file2.txt
would be written as:

copy.exe file1.txt^
 file2.txt




ECHO %shotFullName%> tempfile.txt
FOR %%? IN (tempfile.txt) DO ( SET /A shotNameLength=%%~z? - 2 )
del tempfile.txt

to find length



TIMEOUT

TIMEOUT was included in some of the Windows Resource Kits, but is now a standard command in Windows 7 and 8 (not sure about Vista).
It waits for the specified number of seconds or a keypress, and then exits.
So, unlike SLEEP, TIMEOUT's delay can be "bypassed" by pressing a key.

TIMEOUT 10
or

TIMEOUT /T 10
will delay execution of the next command by 10 seconds, or until a key is pressed, whichever is shorter.

D:\>TIMEOUT /T 10

Waiting for  0 seconds, press a key to continue ...
You may not always want to abort the delay with a simple key press, in which case you can use TIMEOUT's optional /NOBREAK switch:

D:\>TIMEOUT /T 10 /NOBREAK

Waiting for  0 seconds, press CTRL+C to quit ...
You can still abort the delay, but this requires Ctrl+C instead of just any key, and will raise an ErrorLevel 1.



IF ERRORLEVEL 1 ECHO error level is 1 or more






If you want to return from a CALL, you use EXIT command with /B argument (as "EXIT" alone will terminate the batch file).

For example:

CALL :SUB_ONE
CALL :SUB_TWO

GOTO :EOF

:SUB_ONE
ECHO Hello from one
EXIT /B

:SUB_TWO
ECHO Hello from two
EXIT /B

:EOF



Using: echo | set /p= or <NUL set /p= will both work to suppress the newline.

However, this can be very dangerous when writing more advanced scripts when checking the ERRORLEVEL becomes important as setting set /p= without specifying a variable name will set the ERRORLEVEL to 1.

A better approach would be to just use a dummy variable name like so:
echo | set /p dummyName=Hello World

This will produce exactly what you want without any sneaky stuff going on in the background as I had to find out the hard way, but this only works with the piped version; <NUL set /p dummyName=Hello will still raise the ERRORLEVEL to 1.





Assuming we're using a recent-ish version of CMD here, I'm pretty shocked to find no one has posted the following, which allows an arbitrary number of arguments to be processed easily without ever using the clunky shift command:

rem test.bat
call :subr %*
exit /b

:subr
for %%A in (%*) do (
    echo %%A
)
exit /b
You can also do this same technique right in "main" as well.

This way, you don't eat up your arguments as you process them, and there is need for shift, meaning you can consistently loop through the argument-list more than once if you have complicated calling options and it happens to make your script's logic simpler.

Obviously, if do loop through more than once, it increases computational complexity in exchange for legibility, but neither Bash nor CMD were really built for great speed (as far as I've ever heard) so there's little point in trying to optimize by doing setup all-in-one-go assuming n is any less than 100 or so.

Some sample output:

C:\tmp>test.bat one two three four five six seven eight nine ten eleven
one
two
three
four
five
six
seven
eight
nine
ten
eleven
edit - On the off chance anyone is processing arguments against another list and part of the work is nested, it's important that an intermediary CALL be used to allow the current argument being processed to be transferred into the inner loop; simply doing set intermediary=%%OUTER appears to simply set intermediary to a an empty string, so it's next simplest to do this:

setlocal enabledelayedexpansion
rem ^ in my experience, it's always a good idea to set this if for-loops are involved
for /f %%L in (file.txt) do (
    call :inner %%L
)
exit /b

:inner
for %%A in (%*) do (
    if %%A EQU %~1 call dosomething.bat %~1        
)
exit /b
edit 2 - Also, if for whatever reason you want to add the shift approach into the mix here, perhaps trying to pass all arguments other than the 1st to a subroutine by using a shift and then using call :subroutine %*, note that it won't work because %* actually gives you all of the original arguments in order, ignorant of any shifting you have done. 
It's a shame because there's no native syntax (that I know of) that can group all arguments after a certain one, as one might expect say %3* to do.















