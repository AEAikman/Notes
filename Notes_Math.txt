Pascal Triangle



Using Pascal's Triangle

Heads and Tails

Pascal's Triangle can show you how many ways heads and tails can combine. This can then show you the probability of any combination.

For example, if you toss a coin three times, there is only one combination that will give you three heads (HHH), but there are three that will give two heads and one tail (HHT, HTH, THH), also three that give one head and two tails (HTT, THT, TTH) and one for all Tails (TTT). This is the pattern "1,3,3,1" in Pascal's Triangle.

Tosses	Possible Results (Grouped)	Pascal's Triangle
1	H
T	1, 1
2	HH
HT TH
TT	1, 2, 1
3	HHH
HHT, HTH, THH
HTT, THT, TTH
TTT	1, 3, 3, 1
4	HHHH
HHHT,	HHTH,	HTHH,	THHH
HHTT,	HTHT,	HTTH,	THHT,	THTH,	TTHH
HTTT,	THTT,	TTHT,	TTTH
TTTT	1, 4, 6, 4, 1
 	... etc ...	 

Example: What is the probability of getting exactly two heads with 4 coin tosses?

There are 1+4+6+4+1 = 16 (or 24=16) possible results, and 6 of them give exactly two heads. So the probability is 6/16, or 37.5%





Combinations

The triangle also shows you how many Combinations of objects are possible.

Example: You have 16 pool balls. How many different ways could you choose just 3 of them (ignoring the order that you select them)?

Answer: go down to the start of row 16 (the top row is 0), and then along 3 places (the first place is 0) and the value there is your answer, 560.

Here is an extract at row 16:

1    14    91    364  ...
1    15    105   455   1365  ...
1    16   120   560   1820  4368  ...


use n Choose k to find row and column
can be used to find number of combinations

# """  N Choose K can also be used to determin the number of combinations.  Example: You have 16 pool balls. How many different ways could you choose just 3 of them (ignoring the order that you select them)?

# Answer: go down to the start of row 16 (the top row is 0), and then along 3 places (the first place is 0) and the value there is your answer, 560."""





log


def lg(x, tol=1e-13):
  res = 0.0

  # Integer part
  while x<1:
    res -= 1
    x *= 2
  while x>=2:
    res += 1
    x /= 2

  # Fractional part
  fp = 1.0
  while fp>=tol:
    fp /= 2
    x *= x
    if x >= 2:
        x /= 2
        res += fp

  return res