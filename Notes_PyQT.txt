 Python QT notes 

For Install
sip-4.19.1.zip
PyQt4_gpl_win-4.12.zip
PyQt4-4.11.4-cp27-cp27m-win32.whl

References
Installing PyQt
http://stackoverflow.com/questions/23018398/error-while-installing-pyqt?rq=1

For using PyQt
https://nikolak.com/pyqt-qt-designer-getting-started/
https://nikolak.com/pyqt-threading-tutorial/


To create a py file that will make py files from ui files

from PyQt4 import uic
import os
cwd = os.getcwd()
uic.compileUiDir(cwd,recurse=False)

TO CREATE A BATCH FILE FOR MAKING EXECUTABLES
pyinstaller --clean --win-private-assemblies --onefile --noconsole --icon=icon.ico FileToSource.pyw

FOR CUSTOM SIGNAL
from thread
self.emit(QtCore.SIGNAL('increaseProgBar(QString)'), sizeJustFinished)
to window
self.connect(self.get_thread, QtCore.SIGNAL("increaseProgBar(QString)"), self.increaseProgBar)


QT FROM UI SNIPPET

import os, sys, threading, time, datetime
from PyQt4 import QtGui, QtCore, uic
import ExampleUI

def writeInfo(infoToWriteInput):
    if infoToWriteInput != newlines and infoToWriteInput != "\n" and infoToWriteInput != separator:
        ts = time.time()
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        st = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')
        infoToWrite = (str(st) + " - " + infoToWriteInput + "\n")
    else:
        infoToWrite = (infoToWriteInput + "\n")

    logFile = open(logFileSource, 'a')
    logFile.write(infoToWrite)
    logFile.close()

class exampleThread(QtCore.QThread):
    def __init__(self):
        QtCore.QThread.__init__(self)
        # Initialize stuff

    def __del__(self):
        self.wait()

    def run(self):
        # do stuff
        self.emit(QtCore.SIGNAL('increaseProgBar(QString)'), sizeJustFinished)


class ExampleWindow(QtGui.QMainWindow, ExampleUI.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.runExample()

    def runExample(self):

        self.get_thread = exampleThread()
        self.connect(self.get_thread, QtCore.SIGNAL("increaseProgBar(QString)"), self.increaseProgBar)
        self.connect(self.get_thread, QtCore.SIGNAL("finished()"), self.threadEnd)

        self.get_thread.start()

    def increaseProgBar(self, sizeInp):
    	# do stuff

def main():
    app = QtGui.QApplication(sys.argv)
    form = ExampleWindow()
    form.show()
    app.exec_()


# Running Process
if __name__ == '__main__':
    main()
